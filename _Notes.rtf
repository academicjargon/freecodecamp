{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red49\green49\blue49;\red255\green255\blue255;\red36\green111\blue192;
}
{\*\expandedcolortbl;;\cssrgb\c25098\c25098\c25098;\cssrgb\c100000\c100000\c100000;\cssrgb\c17255\c51765\c80000;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
Interview Questions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\b0 \cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
What is Object Oriented Programming? \'a0 {\field{\*\fldinst{HYPERLINK "https://www.glassdoor.com/Interview/What-is-Object-Oriented-Programming-QTN_1766652.htm"}}{\fldrslt \cf4 Answer Question}}\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
What is polymorphism? \'a0 {\field{\*\fldinst{HYPERLINK "https://www.glassdoor.com/Interview/What-is-polymorphism-QTN_1766653.htm"}}{\fldrslt \cf4 Answer Question}}\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
What is the big-O efficiency of the string comparing problem I had to write. \'a0\
\ls1\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Write a small program that checks for matching brackets. For example, the program would return true if it were given "( ( \{ ( \{ [ ] \} ) \} ) )" where all brackets pair correctly as they would in a program, and return false for something like "( ( [ ] )" or "( [ ) ]". \'a0\
\pard\tx720\pardeftab720\partightenfactor0
\cf4 \cb1 \
\
Data structures:\
array\
linked table\
stack\
queue\
tree\cf2 \cb3 \
\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Given a string of brackets, return if string is valid or not. String is valid if all opening brackets have matching closing brackets.\cb1 \uc0\u8232 
\b \cb3 Example:
\b0 \cb1 \uc0\u8232 \cb3 \{[()]\} = valid\cb1 \uc0\u8232 \cb3 \{()[]\} = valid\cb1 \uc0\u8232 \cb3 \{[\} = invalid \'a0 {\field{\*\fldinst{HYPERLINK "https://www.glassdoor.com/Interview/Given-a-string-of-brackets-return-if-string-is-valid-or-not-String-is-valid-if-all-opening-brackets-have-matching-closing-QTN_1561025.htm"}}{\fldrslt \cf4 1 Answer}}\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Given an array of integers, change the order of the integers so negative numbers appear first then positive numbers. Do not change the order of the integers.\cb1 \uc0\u8232 
\b \cb3 Example:
\b0 \cb1 \uc0\u8232 \cb3 1,-5,-1,3,23,-12 => -5,-1,-12,1,3,23 \'a0 \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Given a two-dimensional array of strings, return all possible combination of words.\cb1 \uc0\u8232 
\b \cb3 Example:
\b0 \cb1 \uc0\u8232 \cb3 ['grey','black']\cb1 \uc0\u8232 \cb3 ['fox','dog']\cb1 \uc0\u8232 \cb3 ['jumped','ran','growled']\cb1 \uc0\u8232 
\b \cb3 Return:
\b0 \cb1 \uc0\u8232 \cb3 grey fox jumped\cb1 \uc0\u8232 \cb3 grey fox ran\cb1 \uc0\u8232 \cb3 grey fox growled\cb1 \uc0\u8232 \cb3 black fox jumped\cb1 \uc0\u8232 \cb3 ...\cb1 \uc0\u8232 \cb3 black dog growled \'a0\cf4 \cb1 \
\pard\tx720\pardeftab720\partightenfactor0
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls3\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Most, (maybe all?) questions I got were array manipulation (sort, output certain combinations, analyze mathamatically), so I would strongly recommend brushing up on that. \'a0\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf4 \cb1 \kerning1\expnd0\expndtw0 		\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \cb3 		\expnd0\expndtw0\kerning0
The OA is a list of list of strings and you need to print all the combinations of the words from different lists, and you cannot use recursive method \'a0\
\ls3\ilvl0\kerning1\expnd0\expndtw0 		\
		\
		\expnd0\expndtw0\kerning0
Cartesian product of a vector of vectors without using recursion. Checking to see if a string is a substring. \'a0\cf4 \cb1 \
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\
		\expnd0\expndtw0\kerning0
Reservoir Sampling\
\ls3\ilvl0\kerning1\expnd0\expndtw0 		\
		\expnd0\expndtw0\kerning0
Q1) Separate the positive and negative numbers while maintaining the order.\cb1 \uc0\u8232 \cb3 Q2) How to find whether string is sub string or not.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 		\
		\expnd0\expndtw0\kerning0
An array has negative and positive numbers. Separate the numbers such that negative numbers are at the beginning and positive numbers at the end without changing the order. First with additional data structures but no lists and again without any additional data structures. \'a0\cf4 \cb1 \
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\
		\expnd0\expndtw0\kerning0
Asked to run through PHP code to predict output/fix code. I didn't know any PHP but the interviewer was very understanding and helped me with syntax \'a0\cf4 \cb1 \
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\
		\expnd0\expndtw0\kerning0
An array has negative and positive numbers. Separate the numbers such that negative numbers are at the beginning and positive numbers at the end without changing the order. You cannot sort it.\cb1 \uc0\u8232 \cb3 Explain with O(1) space \
\ls3\ilvl0\kerning1\expnd0\expndtw0 		\
		\expnd0\expndtw0\kerning0
How many different display declarations can you name? \'a0\cf4 \cb1 \
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\
		\expnd0\expndtw0\kerning0
Separate negative and positives in an array in O(n) time and O(1) space \'a0\cf4 \cb1 \
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Separate an array into two arrays where one has all negatives and the other has all positives. Maintain the order \'a0\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf4 \cb1 \kerning1\expnd0\expndtw0 		\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \cb3 		\expnd0\expndtw0\kerning0
Array data structure questions \'a0\cf4 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf4 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\tx720\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf4 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \cb3 \
\
\
}